upstream insights_app_server {
    {% for host in nginx_insights_gunicorn_hosts %}
        server {{ host }}:{{ insights_gunicorn_port }} fail_timeout=0;
    {% endfor %}
}

server {
  {% if nginx_default_sites is defined and "insights" in nginx_default_sites %}
  {% set default_site = "default_server" %}
  {% else %}
  {% set default_site = "" %}
  {% endif %}

  listen {{ INSIGHTS_NGINX_PORT }} {{ default_site }};

  server_name {{ INSIGHTS_BASE }};

  {% if NGINX_ENABLE_SSL %}
  listen {{ INSIGHTS_NGINX_SSL_PORT }} ssl;

  ssl_certificate /etc/letsencrypt/live/{{ INSIGHTS_BASE }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ INSIGHTS_BASE }}/privkey.pem;

  # request the browser to use SSL for all connections
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

  ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
  # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
  ssl_dhparam {{ dhparamfile_dir }}/dhparam.pem;
  ssl_session_timeout  24h;
  ssl_session_cache shared:SSL:50m;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_prefer_server_ciphers   on;
  ssl_trusted_certificate     /etc/ssl/certs/ca-certificates.crt;
  resolver                8.8.8.8;

  {% endif %}

  location '/.well-known/acme-challenge' {
    allow all;
    default_type "text/plain";
    root /var/www/letsencrypt;
  }

  location ~ ^/static/(?P<file>.*) {
    root {{ COMMON_DATA_DIR }}/{{ insights_service_name }};
    try_files /staticfiles/$file =404;
  }

  location / {
    try_files $uri @proxy_to_app;
  }

  # No basic auth security on the heartbeat url, so that ELB can use it
  location /status {
    try_files $uri @proxy_to_app;
  }

  {% include "robots.j2" %}

location @proxy_to_app {
    {% if NGINX_ENABLE_SSL %}
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header Host $http_host;
    {% else %}
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
    proxy_set_header X-Forwarded-Port $http_x_forwarded_port;
    proxy_set_header X-Forwarded-For $http_x_forwarded_for;
    proxy_set_header Host $http_host;
    {% endif %}
    proxy_redirect off;
    proxy_pass http://insights_app_server;
  }

  # Prevent invalid display courseware in IE 10+ with high privacy settings
  add_header P3P '{{ NGINX_P3P_MESSAGE }}';
  
  # Nginx does not support nested condition or or conditions so
  # there is an unfortunate mix of conditonals here.
  {% if NGINX_REDIRECT_TO_HTTPS %}
     {% if NGINX_HTTPS_REDIRECT_STRATEGY == "scheme" %}
  # Redirect http to https over single instance
  if ($scheme != "https") 
  { 
   set $do_redirect_to_https "true";
  }

     {% elif NGINX_HTTPS_REDIRECT_STRATEGY == "forward_for_proto" %}

  # Forward to HTTPS if we're an HTTP request... and the server is behind ELB 
  if ($http_x_forwarded_proto = "http") 
  {
   set $do_redirect_to_https "true";
  }
  {% endif %}

  # Execute the actual redirect
  if ($do_redirect_to_https = "true")
  {
  return 301 https://$host$request_uri;
  }
  {% endif %}
}
